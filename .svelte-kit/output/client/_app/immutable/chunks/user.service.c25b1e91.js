import{e as s}from"./environment.d04864f2.js";import{a as n,m as u,b as d}from"./users.e2f3b943.js";class h{constructor(){this.baseUrl=s.apiUrl,this.useMock=s.useMock,console.log("üë§ UserRepository: Repository de usu√°rio inicializado"),console.log("üë§ UserRepository: Modo mock:",this.useMock)}async simulateNetworkDelay(){const e=Math.random()*1e3+500;await new Promise(r=>setTimeout(r,e))}async setupUser(e){if(this.useMock)return this.mockSetupUser(e);const r=await fetch(`${this.baseUrl}/user/setup`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.toPayload())});if(!r.ok)throw new Error(`Erro na configura√ß√£o: ${r.status}`);return r.json()}async mockSetupUser(e){await this.simulateNetworkDelay();const r=e.toPayload(),t=this.calculateNutritionGoals(r);return{success:!0,profile:{...r,...t,setupCompleted:!0,setupDate:new Date().toISOString()},message:"Perfil configurado com sucesso",aiRecommendations:["Suas metas foram calculadas com base no seu perfil","Recomendamos come√ßar gradualmente","Mantenha-se hidratado durante o dia"]}}calculateNutritionGoals(e){let r;e.gender==="male"?r=88.362+13.397*e.currentWeight+4.799*e.height-5.677*e.age:r=447.593+9.247*e.currentWeight+3.098*e.height-4.33*e.age;let o=r*{sedentary:1.2,light:1.375,moderate:1.55,active:1.725}[e.activityLevel];e.goal==="lose_weight"?o-=500:e.goal==="gain_weight"&&(o+=500);const i=e.currentWeight*2,a=o*.25/9,c=(o-i*4-a*9)/4;return{dailyCalories:Math.round(o),dailyProtein:Math.round(i),dailyCarbs:Math.round(c),dailyFat:Math.round(a),dailyWater:2500}}async updateWeight(e){if(this.useMock)return this.mockUpdateWeight(e);const r=await fetch(`${this.baseUrl}/user/weight`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.toPayload())});if(!r.ok)throw new Error(`Erro ao atualizar peso: ${r.status}`);return r.json()}async mockUpdateWeight(e){return await this.simulateNetworkDelay(),{success:!0,weightEntry:e.toPayload(),message:"Peso atualizado com sucesso",progress:{change:-.2,trend:"decreasing"}}}async addWater(e){if(this.useMock)return this.mockAddWater(e);const r=await fetch(`${this.baseUrl}/user/water`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.toPayload())});if(!r.ok)throw new Error(`Erro ao adicionar √°gua: ${r.status}`);return r.json()}async mockAddWater(e){await this.simulateNetworkDelay();const r=e.toPayload(),t=n.reduce((a,c)=>a+c.amount,0)+r.amount,o=2500,i=Math.min(t/o*100,100);return{success:!0,waterEntry:r,dailyStats:{total:t,goal:o,percentage:Math.round(i),remaining:Math.max(o-t,0)},message:"Hidrata√ß√£o registrada com sucesso"}}async addExercise(e){if(this.useMock)return this.mockAddExercise(e);const r=await fetch(`${this.baseUrl}/user/exercise`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.toPayload())});if(!r.ok)throw new Error(`Erro ao adicionar exerc√≠cio: ${r.status}`);return r.json()}async mockAddExercise(e){await this.simulateNetworkDelay();const r=e.toPayload();return{success:!0,exercise:{id:"ex-"+Date.now(),...r},message:"Exerc√≠cio registrado com sucesso",achievements:["Primeira atividade da semana!"]}}async getUserProfile(){if(this.useMock)return this.mockGetUserProfile();const e=await fetch(`${this.baseUrl}/user/profile`);if(!e.ok)throw new Error(`Erro ao obter perfil: ${e.status}`);return e.json()}async mockGetUserProfile(){return await this.simulateNetworkDelay(),{success:!0,user:u[0]}}async getWaterStats(e=null){if(this.useMock)return this.mockGetWaterStats(e);const r=e?`?date=${e}`:"",t=await fetch(`${this.baseUrl}/user/water/stats${r}`);if(!t.ok)throw new Error(`Erro ao obter estat√≠sticas: ${t.status}`);return t.json()}async mockGetWaterStats(e=null){await this.simulateNetworkDelay();const r=e||new Date().toISOString().split("T")[0],t=n.filter(a=>a.timestamp.startsWith(r)),o=t.reduce((a,c)=>a+c.amount,0),i=2500;return{success:!0,stats:{date:r,total:o,goal:i,percentage:Math.round(o/i*100),remaining:Math.max(i-o,0),entries:t,streak:5}}}async getExerciseHistory(e=null){if(this.useMock)return this.mockGetExerciseHistory(e);const r=e?`?date=${e}`:"",t=await fetch(`${this.baseUrl}/user/exercise/history${r}`);if(!t.ok)throw new Error(`Erro ao obter hist√≥rico: ${t.status}`);return t.json()}async mockGetExerciseHistory(e=null){await this.simulateNetworkDelay();const r=e||new Date().toISOString().split("T")[0],t=d.filter(a=>a.timestamp.startsWith(r)),o=t.reduce((a,c)=>a+c.caloriesBurned,0),i=t.reduce((a,c)=>a+c.duration,0);return{success:!0,history:{date:r,exercises:t,summary:{totalExercises:t.length,totalCalories:o,totalDuration:i}}}}}const y=new h;class w{constructor(){this.repository=y,console.log("üë§ UserService: Servi√ßo de usu√°rio inicializado")}async setupUser(e){if(!e.isValid())throw new Error("Dados de configura√ß√£o inv√°lidos");try{s.enableLogs&&console.log("üë§ UserService: Configurando usu√°rio...");const r=await this.repository.setupUser(e);return s.enableLogs&&console.log("‚úÖ UserService: Usu√°rio configurado com sucesso"),r}catch(r){throw console.error("‚ùå UserService: Erro na configura√ß√£o do usu√°rio:",r),r}}async updateWeight(e){if(!e.isValid())throw new Error("Dados de peso inv√°lidos");try{s.enableLogs&&console.log("üë§ UserService: Atualizando peso...");const r=await this.repository.updateWeight(e);return s.enableLogs&&console.log("‚úÖ UserService: Peso atualizado com sucesso"),r}catch(r){throw console.error("‚ùå UserService: Erro ao atualizar peso:",r),r}}async addWater(e){if(!e.isValid())throw new Error("Dados de hidrata√ß√£o inv√°lidos");try{s.enableLogs&&console.log("üë§ UserService: Adicionando √°gua...");const r=await this.repository.addWater(e);return s.enableLogs&&console.log("‚úÖ UserService: √Ågua adicionada com sucesso"),r}catch(r){throw console.error("‚ùå UserService: Erro ao adicionar √°gua:",r),r}}async addExercise(e){if(!e.isValid())throw new Error("Dados de exerc√≠cio inv√°lidos");try{s.enableLogs&&console.log("üë§ UserService: Adicionando exerc√≠cio...");const r=await this.repository.addExercise(e);return s.enableLogs&&console.log("‚úÖ UserService: Exerc√≠cio adicionado com sucesso"),r}catch(r){throw console.error("‚ùå UserService: Erro ao adicionar exerc√≠cio:",r),r}}async getUserProfile(){try{s.enableLogs&&console.log("üë§ UserService: Obtendo perfil do usu√°rio...");const e=await this.repository.getUserProfile();return s.enableLogs&&console.log("‚úÖ UserService: Perfil obtido com sucesso"),e}catch(e){throw console.error("‚ùå UserService: Erro ao obter perfil:",e),e}}async getWaterStats(e=null){try{s.enableLogs&&console.log("üë§ UserService: Obtendo estat√≠sticas de hidrata√ß√£o...");const r=await this.repository.getWaterStats(e);return s.enableLogs&&console.log("‚úÖ UserService: Estat√≠sticas obtidas com sucesso"),r}catch(r){throw console.error("‚ùå UserService: Erro ao obter estat√≠sticas de hidrata√ß√£o:",r),r}}async getExerciseHistory(e=null){try{s.enableLogs&&console.log("üë§ UserService: Obtendo hist√≥rico de exerc√≠cios...");const r=await this.repository.getExerciseHistory(e);return s.enableLogs&&console.log("‚úÖ UserService: Hist√≥rico obtido com sucesso"),r}catch(r){throw console.error("‚ùå UserService: Erro ao obter hist√≥rico de exerc√≠cios:",r),r}}}export{w as U};
