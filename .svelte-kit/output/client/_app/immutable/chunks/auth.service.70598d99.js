import{e as o}from"./environment.d04864f2.js";import{m as t}from"./users.e2f3b943.js";class h{constructor(e={}){this.email=e.email||"",this.password=e.password||"",this.rememberMe=e.rememberMe||!1}isValid(){return this.email.trim()!==""&&this.password.trim()!==""&&this.isValidEmail(this.email)}isValidEmail(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}toPayload(){return{email:this.email.trim().toLowerCase(),password:this.password,rememberMe:this.rememberMe}}}class m{constructor(e={}){this.name=e.name||"",this.email=e.email||"",this.password=e.password||"",this.confirmPassword=e.confirmPassword||"",this.acceptTerms=e.acceptTerms||!1}isValid(){return this.name.trim()!==""&&this.email.trim()!==""&&this.password.trim()!==""&&this.confirmPassword.trim()!==""&&this.acceptTerms&&this.isValidEmail(this.email)&&this.isValidPassword(this.password)&&this.password===this.confirmPassword}isValidEmail(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}isValidPassword(e){return/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*#?&]{8,}$/.test(e)}toPayload(){return{name:this.name.trim(),email:this.email.trim().toLowerCase(),password:this.password}}}class a{constructor(){this.baseUrl=o.apiUrl,this.useMock=o.useMock,console.log("üîê AuthRepository: Repository de autentica√ß√£o inicializado"),console.log("üîê AuthRepository: Modo mock:",this.useMock)}async simulateNetworkDelay(){const e=Math.random()*1e3+500;await new Promise(r=>setTimeout(r,e))}async login(e){if(this.useMock)return this.mockLogin(e);const r=await fetch(`${this.baseUrl}/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.toPayload())});if(!r.ok)throw new Error(`Erro no login: ${r.status}`);return r.json()}async mockLogin(e){await this.simulateNetworkDelay();const r=e.toPayload();if(r.email==="maria@macrofit.com"&&r.password==="123456")return{success:!0,user:t[0],token:null,message:"Login realizado com sucesso"};throw new Error("Email ou senha inv√°lidos")}async register(e){if(this.useMock)return this.mockRegister(e);const r=await fetch(`${this.baseUrl}/auth/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.toPayload())});if(!r.ok)throw new Error(`Erro no registro: ${r.status}`);return r.json()}async mockRegister(e){await this.simulateNetworkDelay();const r=e.toPayload();if(r.email==="maria@macrofit.com")throw new Error("Email j√° est√° em uso");return{success:!0,user:{id:"user-"+Date.now(),email:r.email,name:r.name,premium:!1,profile:null,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},message:"Conta criada com sucesso"}}async forgotPassword(e){if(this.useMock)return this.mockForgotPassword(e);const r=await fetch(`${this.baseUrl}/auth/forgot-password`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.toPayload())});if(!r.ok)throw new Error(`Erro na recupera√ß√£o: ${r.status}`);return r.json()}async mockForgotPassword(e){return await this.simulateNetworkDelay(),{success:!0,message:"Email de recupera√ß√£o enviado com sucesso"}}async logout(){if(this.useMock)return this.mockLogout();const e=await fetch(`${this.baseUrl}/auth/logout`,{method:"POST",credentials:"include"});if(!e.ok)throw new Error(`Erro no logout: ${e.status}`);return e.json()}async mockLogout(){return await this.simulateNetworkDelay(),{success:!0,message:"Logout realizado com sucesso"}}async verifyAuth(){if(this.useMock)return this.mockVerifyAuth();const e=await fetch(`${this.baseUrl}/auth/verify`,{method:"GET",credentials:"include"});if(!e.ok)throw new Error(`Erro na verifica√ß√£o: ${e.status}`);return e.json()}async mockVerifyAuth(){return await this.simulateNetworkDelay(),{success:!0,user:t[0]}}async getCurrentUser(){if(this.useMock)return this.mockGetCurrentUser();const e=await fetch(`${this.baseUrl}/auth/me`,{method:"GET",credentials:"include"});if(!e.ok)throw new Error(`Erro ao obter usu√°rio: ${e.status}`);return e.json()}async mockGetCurrentUser(){return await this.simulateNetworkDelay(),{success:!0,user:t[0]}}}const n=new a;class d{constructor(){this.repository=n,console.log("üîê AuthService: Servi√ßo de autentica√ß√£o inicializado")}async login(e){if(!e.isValid())throw new Error("Dados de login inv√°lidos");try{o.enableLogs&&console.log("üîê AuthService: Realizando login...");const r=await this.repository.login(e);return o.enableLogs&&console.log("‚úÖ AuthService: Login realizado com sucesso"),r}catch(r){throw console.error("‚ùå AuthService: Erro no login:",r),r}}async register(e){if(!e.isValid())throw new Error("Dados de registro inv√°lidos");try{o.enableLogs&&console.log("üîê AuthService: Realizando registro...");const r=await this.repository.register(e);return o.enableLogs&&console.log("‚úÖ AuthService: Registro realizado com sucesso"),r}catch(r){throw console.error("‚ùå AuthService: Erro no registro:",r),r}}async forgotPassword(e){if(!e.isValid())throw new Error("Email inv√°lido");try{o.enableLogs&&console.log("üîê AuthService: Solicitando recupera√ß√£o de senha...");const r=await this.repository.forgotPassword(e);return o.enableLogs&&console.log("‚úÖ AuthService: Solicita√ß√£o de recupera√ß√£o enviada"),r}catch(r){throw console.error("‚ùå AuthService: Erro na recupera√ß√£o de senha:",r),r}}async logout(){try{o.enableLogs&&console.log("üîê AuthService: Realizando logout..."),await this.repository.logout(),o.enableLogs&&console.log("‚úÖ AuthService: Logout realizado com sucesso")}catch(e){throw console.error("‚ùå AuthService: Erro no logout:",e),e}}async verifyAuth(){try{return await this.repository.verifyAuth()}catch(e){throw console.error("‚ùå AuthService: Erro na verifica√ß√£o de autentica√ß√£o:",e),e}}async getCurrentUser(){try{return await this.repository.getCurrentUser()}catch(e){throw console.error("‚ùå AuthService: Erro ao obter usu√°rio atual:",e),e}}}export{d as A,h as L,m as R};
