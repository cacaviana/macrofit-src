/**
 * Meals Service - MacroFit
 * Gerencia opera√ß√µes relacionadas a refei√ß√µes
 */

import { environment } from '$lib/config/environment.js';
import mealsRepository from '../data/repositories/meals.repository.js';

export class MealsService {
  constructor() {
    this.repository = mealsRepository;
    
    if (environment.enableLogs) {
      console.log('üçΩÔ∏è MealsService: Servi√ßo de refei√ß√µes inicializado');
    }
  }

  /**
   * Registra refei√ß√£o via texto
   * ‚ö†Ô∏è IMPORTANTE: Recebe DTO j√° criado pela UI
   * @param {CreateMealTextRequest} mealDto - DTO j√° instanciado pela UI
   * @returns {Promise<Object>}
   */
  async createMealFromText(mealDto) {
    // O Service n√£o conhece os campos do DTO, apenas usa seus m√©todos
    if (!mealDto.isValid()) {
      throw new Error('Dados da refei√ß√£o inv√°lidos');
    }

    try {
      if (environment.enableLogs) {
        console.log('üçΩÔ∏è MealsService: Registrando refei√ß√£o via texto...');
      }

      // O Service passa o DTO completo para o Repository
      const result = await this.repository.createMealFromText(mealDto);

      if (environment.enableLogs) {
        console.log('‚úÖ MealsService: Refei√ß√£o registrada com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå MealsService: Erro ao registrar refei√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Registra refei√ß√£o via foto
   * ‚ö†Ô∏è IMPORTANTE: Recebe DTO j√° criado pela UI
   * @param {CreateMealPhotoRequest} mealDto - DTO j√° instanciado pela UI
   * @returns {Promise<Object>}
   */
  async createMealFromPhoto(mealDto) {
    // O Service n√£o conhece os campos do DTO, apenas usa seus m√©todos
    if (!mealDto.isValid()) {
      throw new Error('Dados da refei√ß√£o inv√°lidos');
    }

    try {
      if (environment.enableLogs) {
        console.log('üçΩÔ∏è MealsService: Registrando refei√ß√£o via foto...');
      }

      // O Service passa o DTO completo para o Repository
      const result = await this.repository.createMealFromPhoto(mealDto);

      if (environment.enableLogs) {
        console.log('‚úÖ MealsService: Refei√ß√£o registrada com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå MealsService: Erro ao registrar refei√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Registra refei√ß√£o via √°udio
   * ‚ö†Ô∏è IMPORTANTE: Recebe DTO j√° criado pela UI
   * @param {CreateMealAudioRequest} mealDto - DTO j√° instanciado pela UI
   * @returns {Promise<Object>}
   */
  async createMealFromAudio(mealDto) {
    // O Service n√£o conhece os campos do DTO, apenas usa seus m√©todos
    if (!mealDto.isValid()) {
      throw new Error('Dados da refei√ß√£o inv√°lidos');
    }

    try {
      if (environment.enableLogs) {
        console.log('üçΩÔ∏è MealsService: Registrando refei√ß√£o via √°udio...');
      }

      // O Service passa o DTO completo para o Repository
      const result = await this.repository.createMealFromAudio(mealDto);

      if (environment.enableLogs) {
        console.log('‚úÖ MealsService: Refei√ß√£o registrada com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå MealsService: Erro ao registrar refei√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Busca alimentos
   * ‚ö†Ô∏è IMPORTANTE: Recebe DTO j√° criado pela UI
   * @param {SearchFoodRequest} searchDto - DTO j√° instanciado pela UI
   * @returns {Promise<Object>}
   */
  async searchFood(searchDto) {
    // O Service n√£o conhece os campos do DTO, apenas usa seus m√©todos
    if (!searchDto.isValid()) {
      throw new Error('Par√¢metros de busca inv√°lidos');
    }

    try {
      if (environment.enableLogs) {
        console.log('üçΩÔ∏è MealsService: Buscando alimentos...');
      }

      // O Service passa o DTO completo para o Repository
      const result = await this.repository.searchFood(searchDto);

      if (environment.enableLogs) {
        console.log('‚úÖ MealsService: Busca realizada com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå MealsService: Erro na busca de alimentos:', error);
      throw error;
    }
  }

  /**
   * Obt√©m hist√≥rico de refei√ß√µes
   * @param {string} date - Data no formato YYYY-MM-DD
   * @returns {Promise<Object>}
   */
  async getMealsHistory(date = null) {
    try {
      if (environment.enableLogs) {
        console.log('üçΩÔ∏è MealsService: Obtendo hist√≥rico de refei√ß√µes...');
      }

      const result = await this.repository.getMealsHistory(date);

      if (environment.enableLogs) {
        console.log('‚úÖ MealsService: Hist√≥rico obtido com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå MealsService: Erro ao obter hist√≥rico:', error);
      throw error;
    }
  }

  /**
   * Obt√©m resumo nutricional do dia
   * @param {string} date - Data no formato YYYY-MM-DD
   * @returns {Promise<Object>}
   */
  async getDailyNutritionSummary(date = null) {
    try {
      if (environment.enableLogs) {
        console.log('üçΩÔ∏è MealsService: Obtendo resumo nutricional...');
      }

      const result = await this.repository.getDailyNutritionSummary(date);

      if (environment.enableLogs) {
        console.log('‚úÖ MealsService: Resumo obtido com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå MealsService: Erro ao obter resumo nutricional:', error);
      throw error;
    }
  }

  /**
   * Deleta uma refei√ß√£o
   * @param {string} mealId - ID da refei√ß√£o
   * @returns {Promise<Object>}
   */
  async deleteMeal(mealId) {
    if (!mealId) {
      throw new Error('ID da refei√ß√£o √© obrigat√≥rio');
    }

    try {
      if (environment.enableLogs) {
        console.log('üçΩÔ∏è MealsService: Deletando refei√ß√£o...');
      }

      const result = await this.repository.deleteMeal(mealId);

      if (environment.enableLogs) {
        console.log('‚úÖ MealsService: Refei√ß√£o deletada com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå MealsService: Erro ao deletar refei√ß√£o:', error);
      throw error;
    }
  }
}
