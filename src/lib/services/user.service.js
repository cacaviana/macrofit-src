/**
 * User Service - MacroFit
 * Gerencia opera√ß√µes relacionadas ao usu√°rio
 */

import { environment } from '$lib/config/environment.js';
import userRepository from '../data/repositories/user.repository.js';

export class UserService {
  constructor() {
    this.repository = userRepository;
    
    if (environment.enableLogs) {
      console.log('üë§ UserService: Servi√ßo de usu√°rio inicializado');
    }
  }

  /**
   * Configura dados iniciais do usu√°rio
   * ‚ö†Ô∏è IMPORTANTE: Recebe DTO j√° criado pela UI
   * @param {UserSetupRequest} setupDto - DTO j√° instanciado pela UI
   * @returns {Promise<Object>}
   */
  async setupUser(setupDto) {
    // O Service n√£o conhece os campos do DTO, apenas usa seus m√©todos
    if (!setupDto.isValid()) {
      throw new Error('Dados de configura√ß√£o inv√°lidos');
    }

    try {
      if (environment.enableLogs) {
        console.log('üë§ UserService: Configurando usu√°rio...');
      }

      // O Service passa o DTO completo para o Repository
      const result = await this.repository.setupUser(setupDto);

      if (environment.enableLogs) {
        console.log('‚úÖ UserService: Usu√°rio configurado com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå UserService: Erro na configura√ß√£o do usu√°rio:', error);
      throw error;
    }
  }

  /**
   * Atualiza peso do usu√°rio
   * ‚ö†Ô∏è IMPORTANTE: Recebe DTO j√° criado pela UI
   * @param {UpdateWeightRequest} weightDto - DTO j√° instanciado pela UI
   * @returns {Promise<Object>}
   */
  async updateWeight(weightDto) {
    // O Service n√£o conhece os campos do DTO, apenas usa seus m√©todos
    if (!weightDto.isValid()) {
      throw new Error('Dados de peso inv√°lidos');
    }

    try {
      if (environment.enableLogs) {
        console.log('üë§ UserService: Atualizando peso...');
      }

      // O Service passa o DTO completo para o Repository
      const result = await this.repository.updateWeight(weightDto);

      if (environment.enableLogs) {
        console.log('‚úÖ UserService: Peso atualizado com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå UserService: Erro ao atualizar peso:', error);
      throw error;
    }
  }

  /**
   * Adiciona registro de hidrata√ß√£o
   * ‚ö†Ô∏è IMPORTANTE: Recebe DTO j√° criado pela UI
   * @param {AddWaterRequest} waterDto - DTO j√° instanciado pela UI
   * @returns {Promise<Object>}
   */
  async addWater(waterDto) {
    // O Service n√£o conhece os campos do DTO, apenas usa seus m√©todos
    if (!waterDto.isValid()) {
      throw new Error('Dados de hidrata√ß√£o inv√°lidos');
    }

    try {
      if (environment.enableLogs) {
        console.log('üë§ UserService: Adicionando √°gua...');
      }

      // O Service passa o DTO completo para o Repository
      const result = await this.repository.addWater(waterDto);

      if (environment.enableLogs) {
        console.log('‚úÖ UserService: √Ågua adicionada com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå UserService: Erro ao adicionar √°gua:', error);
      throw error;
    }
  }

  /**
   * Adiciona registro de exerc√≠cio
   * ‚ö†Ô∏è IMPORTANTE: Recebe DTO j√° criado pela UI
   * @param {AddExerciseRequest} exerciseDto - DTO j√° instanciado pela UI
   * @returns {Promise<Object>}
   */
  async addExercise(exerciseDto) {
    // O Service n√£o conhece os campos do DTO, apenas usa seus m√©todos
    if (!exerciseDto.isValid()) {
      throw new Error('Dados de exerc√≠cio inv√°lidos');
    }

    try {
      if (environment.enableLogs) {
        console.log('üë§ UserService: Adicionando exerc√≠cio...');
      }

      // O Service passa o DTO completo para o Repository
      const result = await this.repository.addExercise(exerciseDto);

      if (environment.enableLogs) {
        console.log('‚úÖ UserService: Exerc√≠cio adicionado com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå UserService: Erro ao adicionar exerc√≠cio:', error);
      throw error;
    }
  }

  /**
   * Obt√©m perfil do usu√°rio
   * @returns {Promise<Object>}
   */
  async getUserProfile() {
    try {
      if (environment.enableLogs) {
        console.log('üë§ UserService: Obtendo perfil do usu√°rio...');
      }

      const result = await this.repository.getUserProfile();

      if (environment.enableLogs) {
        console.log('‚úÖ UserService: Perfil obtido com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå UserService: Erro ao obter perfil:', error);
      throw error;
    }
  }

  /**
   * Obt√©m estat√≠sticas de hidrata√ß√£o
   * @param {string} date - Data no formato YYYY-MM-DD
   * @returns {Promise<Object>}
   */
  async getWaterStats(date = null) {
    try {
      if (environment.enableLogs) {
        console.log('üë§ UserService: Obtendo estat√≠sticas de hidrata√ß√£o...');
      }

      const result = await this.repository.getWaterStats(date);

      if (environment.enableLogs) {
        console.log('‚úÖ UserService: Estat√≠sticas obtidas com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå UserService: Erro ao obter estat√≠sticas de hidrata√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Obt√©m hist√≥rico de exerc√≠cios
   * @param {string} date - Data no formato YYYY-MM-DD
   * @returns {Promise<Object>}
   */
  async getExerciseHistory(date = null) {
    try {
      if (environment.enableLogs) {
        console.log('üë§ UserService: Obtendo hist√≥rico de exerc√≠cios...');
      }

      const result = await this.repository.getExerciseHistory(date);

      if (environment.enableLogs) {
        console.log('‚úÖ UserService: Hist√≥rico obtido com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå UserService: Erro ao obter hist√≥rico de exerc√≠cios:', error);
      throw error;
    }
  }
}
